version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: financial_postgres
    environment:
      POSTGRES_DB: financial_db
      POSTGRES_USER: financial_user
      POSTGRES_PASSWORD: financial_pass
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - financial_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U financial_user -d financial_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: financial_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - financial_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: financial_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: financial_user
      RABBITMQ_DEFAULT_PASS: financial_pass
      RABBITMQ_DEFAULT_VHOST: financial_vhost
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - financial_network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: financial_app
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=financial_user
      - DB_PASSWORD=financial_pass
      - DB_NAME=financial_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=financial_user
      - RABBITMQ_PASS=financial_pass
      - RABBITMQ_VHOST=financial_vhost
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - GIN_MODE=release
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - financial_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:

networks:
  financial_network:
    driver: bridge 